package com.csp.cases.activity.component.camerademo.camera2;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.Point;
import android.graphics.RectF;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.ImageReader;
import android.os.Build;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.Display;
import android.view.Surface;
import android.view.TextureView;

import com.csp.cases.activity.component.camerademo.camera.ErrorCallback;
import com.csp.cases.activity.component.camerademo.camera.ICamera;
import com.csp.cases.activity.component.camerademo.camera.constant.CameraFlag;
import com.csp.cases.activity.component.camerademo.camera.utils.LogDelegate;
import com.csp.cases.util.GsonUtil;
import com.csp.utils.android.log.LogCat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
public class Camera2Util {

    Activity mActivity;

    private static final int STATE_PREVIEW = 0; // Camera state: Showing camera preview.
    private static final int STATE_WAITING_LOCK = 1; // Camera state: Waiting for the focus to be locked.
    private static final int STATE_WAITING_PRECAPTURE = 2; // Camera state: Waiting for the exposure to be precapture state.
    private static final int STATE_WAITING_NON_PRECAPTURE = 3; // Camera state: Waiting for the exposure state to be something other than precapture.
    private static final int STATE_PICTURE_TAKEN = 4; // Camera state: Picture was taken.

    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();

    static {
        ORIENTATIONS.append(Surface.ROTATION_0, 90);
        ORIENTATIONS.append(Surface.ROTATION_90, 0);
        ORIENTATIONS.append(Surface.ROTATION_180, 270);
        ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    /**
     * 工作线程
     */
    private HandlerThread mBackgroundThread;
    private Handler mBackgroundHandler;


//    /**
//     * ID of the current {@link CameraDevice}.
//     */
//    private String mCameraId;

    /**
     * A {@link Semaphore} to prevent the app from exiting before closing the camera.
     */
    private Semaphore mCameraOpenCloseLock = new Semaphore(1);

    /**
     * A reference to the opened {@link CameraDevice}.
     */
    private CameraDevice mCameraDevice;

    /**
     * A {@link CameraCaptureSession } for camera preview.
     */
    private CameraCaptureSession mCaptureSession;

    /**
     * An {@link ImageReader} that handles still image capture.
     */
    private ImageReader mImageReader;


    /**
     * 相机预览
     */
    private TextureView mTextureView; // 预览载体
    private Size mPreviewSize; // 预览大小

    /**
     * {@link CaptureRequest.Builder} for the camera preview
     */
    private CaptureRequest.Builder mPreviewRequestBuilder;

    /**
     * {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}
     */
    private CaptureRequest mPreviewRequest;

    /**
     * The current state of camera state for taking pictures.
     *
     * @see #mCameraCaptureSessionCaptureCallback
     */
    private int mState = STATE_PREVIEW;

    /**
     * {@link TextureView.SurfaceTextureListener} handles several lifecycle events on a
     * {@link TextureView}.
     */
    private final TextureView.SurfaceTextureListener mSurfaceTextureListener
            = new TextureView.SurfaceTextureListener() {

        @Override
        public void onSurfaceTextureAvailable(SurfaceTexture texture, int width, int height) {
            openCamera(width, height);
        }

        @Override
        public void onSurfaceTextureSizeChanged(SurfaceTexture texture, int width, int height) {
            configureTransform(width, height);
        }

        @Override
        public boolean onSurfaceTextureDestroyed(SurfaceTexture texture) {
            return true;
        }

        @Override
        public void onSurfaceTextureUpdated(SurfaceTexture texture) {
        }
    };


    public boolean setFlashMode() {
        boolean result = setFlashMode(mPreviewRequestBuilder, true);
        if (result) {
            // 显示相机预览
            // Finally, we start displaying the camera preview.
            mPreviewRequest = mPreviewRequestBuilder.build();
            // 设置反复捕获数据的请求，这样预览界面就会一直有数据显示
            try {
                if (mCaptureSession != null)
                    mCaptureSession.setRepeatingRequest(mPreviewRequest, mCameraCaptureSessionCaptureCallback, mBackgroundHandler);
            } catch (CameraAccessException e) {
                mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_FLASH, e);
            }
        } else {
            mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_FLASH, new Exception("不支持闪光灯 "));
        }
        return result;


    }

//    /**
//     * *是否开启闪光灯
//     */
//    private boolean isFlashing = true;
//
//    public void setFlashing(boolean flashing) {
//        isFlashing = flashing;
//    }


    /**
     * This a callback object for the {@link ImageReader}. "onImageAvailable" will be called when a
     * still image is ready to be saved.
     */
    private ImageReader.OnImageAvailableListener mOnImageAvailableListener;

    public void setOnImageAvailableListener(ImageReader.OnImageAvailableListener onImageAvailableListener) {
        mOnImageAvailableListener = onImageAvailableListener;
    }

    public Camera2Util(Activity activity, ICamera.Builder builder, TextureView textureView) {
        mActivity = activity;
        mBuilder = builder;
        mTextureView = textureView;
    }

    /**
     * {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its state.
     */
    private final CameraDevice.StateCallback mCameraDeviceStateCallback = initCameraDeviceStateCallback();
    private final CameraCaptureSession.StateCallback mCameraCaptureSessionStateCallback = initCameraCaptureSessionStateCallback();
    private final CameraCaptureSession.CaptureCallback mCameraCaptureSessionCaptureCallback = initCameraCaptureSessionCaptureCallback();
//    private CameraCaptureSession.CaptureCallback mTakePictureListener;

//    public void setCameraCaptureSessionCaptureCallback(CameraCaptureSession.CaptureCallback cameraCaptureSessionCaptureCallback) {
//        mCameraCaptureSessionCaptureCallback = cameraCaptureSessionCaptureCallback;
//    }

//    public void setTakePictureListener(CameraCaptureSession.CaptureCallback takePictureListener) {
//        mTakePictureListener = takePictureListener;
//    }


    //    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {
//
//        @Override
//        public void onOpened(@NonNull CameraDevice cameraDevice) {
//            // This method is called when the camera is opened. We start camera preview here.
//            mCameraOpenCloseLock.release();
//            mCameraDevice = cameraDevice;
//            createCameraPreviewSession();
//        }
//
//        @Override
//        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
//            mCameraOpenCloseLock.release();
//            cameraDevice.close();
//            mCameraDevice = null;
//        }
//
//        @Override
//        public void onError(@NonNull CameraDevice cameraDevice, int error) {
//            mCameraOpenCloseLock.release();
//            cameraDevice.close();
//            mCameraDevice = null;
//            Activity activity = getActivity();
//            if (null != activity) {
//                activity.finish();
//            }
//        }
//
//    };

//    public void setTextureView(AutoFitTextureView textureView) {
//        mTextureView = textureView;
//    }
//
//    public AutoFitTextureView getTextureView() {
//        return mTextureView;
//    }

    private CameraDevice.StateCallback initCameraDeviceStateCallback() {
        return new CameraDevice.StateCallback() {

            @Override
            public void onOpened(@NonNull CameraDevice cameraDevice) {
                // This method is called when the camera is opened. We start camera preview here.
                mCameraOpenCloseLock.release();
                mCameraDevice = cameraDevice;
                createCameraPreviewSession();
            }

            @Override
            public void onDisconnected(@NonNull CameraDevice cameraDevice) {
                mCameraOpenCloseLock.release();
                cameraDevice.close();
                mCameraDevice = null;
            }

            @Override
            public void onError(@NonNull CameraDevice cameraDevice, int error) {
                mCameraOpenCloseLock.release();
                cameraDevice.close();
                mCameraDevice = null;
//                Activity activity = getActivity();
//                if (null != activity) {
//                    activity.finish();
//                }
            }
        };
    }

    private CameraCaptureSession.StateCallback initCameraCaptureSessionStateCallback() {
        return new CameraCaptureSession.StateCallback() {

            /**
             * 摄像头完成配置，可以处理Capture请求了。
             */
            @Override
            public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                // The camera is already closed
                if (null == mCameraDevice) {
                    return;
                }

                // 自动变焦是连续的
                // When the session is ready, we start displaying the preview.
                mCaptureSession = cameraCaptureSession;
                try {
                    // Auto focus should be continuous for camera preview.
                    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                            CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
                    // Flash is automatically enabled when necessary.
                    setFlashMode(mPreviewRequestBuilder, true);
//                    setAutoFlashForPreview(mPreviewRequestBuilder);

                    // 显示相机预览
                    // Finally, we start displaying the camera preview.
                    mPreviewRequest = mPreviewRequestBuilder.build();
                    // 设置反复捕获数据的请求，这样预览界面就会一直有数据显示
                    mCaptureSession.setRepeatingRequest(mPreviewRequest, mCameraCaptureSessionCaptureCallback, mBackgroundHandler);
                } catch (CameraAccessException e) {
                    mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_CAMERA_ACCESS, e);
                }
            }

            /**
             * 摄像头配置失败
             */
            @Override
            public void onConfigureFailed(
                    @NonNull CameraCaptureSession cameraCaptureSession) {
                mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_CONFIGURE_FAILED, new Exception("摄像头配置失败"));
            }

            /**
             * 摄像头处于就绪状态，当前没有请求需要处理。
             */
            @Override
            public void onReady(@NonNull CameraCaptureSession session) {
                super.onReady(session);
            }

            /**
             * 摄像头正在处理请求
             */
            @Override
            public void onActive(@NonNull CameraCaptureSession session) {
                super.onActive(session);
            }

            /**
             * 会话被关闭
             */
            @Override
            public void onClosed(@NonNull CameraCaptureSession session) {
                super.onClosed(session);
            }

            /**
             * Surface准备就绪
             */
            @Override
            public void onSurfacePrepared(@NonNull CameraCaptureSession session, @NonNull Surface surface) {
                super.onSurfacePrepared(session, surface);
            }
        };
    }

    /**
     * A {@link CameraCaptureSession.CaptureCallback} that handles events related to JPEG capture.
     */
    private CameraCaptureSession.CaptureCallback initCameraCaptureSessionCaptureCallback() {
        return new CameraCaptureSession.CaptureCallback() {
            private void process(CaptureResult result) {
                if (mState != STATE_PREVIEW)
                    LogCat.d("process.mState", mState);

                switch (mState) {
                    case STATE_PREVIEW: {
                        // We have nothing to do when the camera preview is working normally.
                        break;
                    }
                    case STATE_WAITING_LOCK: {
                        // 等待对焦
                        Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);
                        if (afState == null) {
                            // 对焦失败 直接拍照
                            captureStillPicture();
                        } else if (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||
                                CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) {
                            // CONTROL_AE_STATE can be null on some devices
                            Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                            if (aeState == null ||
                                    aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {
                                mState = STATE_PICTURE_TAKEN;
                                //  对焦完成，进行拍照
                                captureStillPicture();
                            } else {
                                runPrecaptureSequence();
                            }
                        } else if (mBuilder.getLensFacing() == CameraFlag.LENS_FACING_FRONT) {
                            // TODO 修改
                            captureStillPicture();
                        }
                        break;
                    }
                    case STATE_WAITING_PRECAPTURE: {
                        // CONTROL_AE_STATE can be null on some devices
                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                        if (aeState == null ||
                                aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||
                                aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {
                            mState = STATE_WAITING_NON_PRECAPTURE;
                        }
                        break;
                    }
                    case STATE_WAITING_NON_PRECAPTURE: {
                        // CONTROL_AE_STATE can be null on some devices
                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                        if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {
                            mState = STATE_PICTURE_TAKEN;
                            captureStillPicture();
                        }
                        break;
                    }
                }
            }

            @Override
            public void onCaptureProgressed(@NonNull CameraCaptureSession session,
                                            @NonNull CaptureRequest request,
                                            @NonNull CaptureResult partialResult) {
                process(partialResult);
            }

            @Override
            public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                           @NonNull CaptureRequest request,
                                           @NonNull TotalCaptureResult result) {
                process(result);
            }
        };
    }

//    private Camera2Util() {
//    }

    // @Override
    public void onResume() {
//        super.onResume();
        startBackgroundThread();

        // When the screen is turned off and turned back on, the SurfaceTexture is already
        // available, and "onSurfaceTextureAvailable" will not be called. In that case, we can open
        // a camera and start preview from here (otherwise, we wait until the surface is ready in
        // the SurfaceTextureListener).
        if (mTextureView.isAvailable()) {
            openCamera(mTextureView.getWidth(), mTextureView.getHeight());
        } else {
            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
        }
    }

    // @Override
    public void onPause() {
        closeCamera();
        stopBackgroundThread();
//        super.onPause();
    }

    /**
     * Initiate a still image capture.
     */
    public void takePicture() {
        lockFocus();
    }

    private CameraManager getCameraManager() {
        return (CameraManager) mActivity.getSystemService(Context.CAMERA_SERVICE);
    }

    private ICamera.Builder mBuilder;

    /**
     * 控制闪光灯
     *
     * @param builder
     */
    private void setAutoFlashForPreview(CaptureRequest.Builder builder) {
        if (mCameraParam.mFlashSupported) {
            /**
             * CaptureRequest.CONTROL_AE_MODE_OFF
             * CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH
             * CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH
             */
//            requestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
//                    CaptureRequest.CONTROL_AE_MODE_OFF);


            // 预览时设置：
//            builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
//            builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_TORCH);

            // 预览时，不打开闪光灯
            builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
            builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_OFF);


//            // 拍照时设置：
//            builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
//            builder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_TORCH);


//            // 若拍摄时，不设置，会造成拍照时闪光灯关闭。
//            // 若拍照时设置为如下，会是在拍照时闪光灯关闭。
//            builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH);


//            int flash = isFlashing ? CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH
//                    : CaptureRequest.CONTROL_AE_MODE_OFF;
//
//            builder.set(CaptureRequest.FLASH_MODE, flash);


//            int flash = isFlashing ? CaptureRequest.FLASH_MODE_TORCH
//                    : CaptureRequest.FLASH_MODE_OFF;
//
//            requestBuilder.set(CaptureRequest.FLASH_MODE, flash);
        }
    }

    /**
     * 控制闪光灯
     *
     * @param builder
     */
    private void setAutoFlash(CaptureRequest.Builder builder) {
        if (mCameraParam.mFlashSupported) {
            /**
             * CaptureRequest.CONTROL_AE_MODE_OFF
             * CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH
             * CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH
             */
//            requestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
//                    CaptureRequest.CONTROL_AE_MODE_OFF);


//            // 预览时设置：
//            builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
//            builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_TORCH);


            // 拍照时打开闪光灯：
            builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
            builder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_TORCH);


//            // 若拍摄时，不设置，会造成拍照时闪光灯关闭。
//            // 若拍照时设置为如下，会是在拍照时闪光灯关闭。
            // builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH);


//            int flash = isFlashing ? CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH
//                    : CaptureRequest.CONTROL_AE_MODE_OFF;
//
//            builder.set(CaptureRequest.FLASH_MODE, flash);


//            int flash = isFlashing ? CaptureRequest.FLASH_MODE_TORCH
//                    : CaptureRequest.FLASH_MODE_OFF;
//
//            requestBuilder.set(CaptureRequest.FLASH_MODE, flash);
        }
    }

//    /**
//     * 控制手电筒
//     *
//     * @param requestBuilder
//     */
//    private void setFlashlight(CaptureRequest.Builder requestBuilder) {
//        int flash = isFlashing ? CaptureRequest.FLASH_MODE_TORCH
//                : CaptureRequest.FLASH_MODE_OFF;
//
//        requestBuilder.set(CaptureRequest.FLASH_MODE, flash);
//    }

    /**
     * 设置闪光灯
     *
     * @param builder
     * @param preview true：预览，false：拍照
     */
    private boolean setFlashMode(CaptureRequest.Builder builder, boolean preview) {
        if (mBuilder == null
                || builder == null
                || !mCameraParam.mFlashSupported)
            return false;

        /**
         * CaptureRequest.CONTROL_AE_MODE_OFF
         * CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH
         * CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH
         */
        switch (mBuilder.getFlashMode()) {
            case CameraFlag.FLASH_CLOSE:
                builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_OFF);
                builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_OFF);
                break;
            case CameraFlag.FLASH_OPEN:
                if (preview) {
                    builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
                    builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_OFF);
                } else {
                    builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
                    builder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_TORCH);
                }
                break;
            case CameraFlag.FLASH_LIGHT:
//                builder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
                builder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_TORCH);
                break;
            case CameraFlag.FLASH_AUTO:
            default:
                // TODO ？？？
                return false;
        }
        return true;
    }


    /**
     * Matrix 转换配置为 mTextureView
     * Configures the necessary {@link Matrix} transformation to `mTextureView`.
     * This method should be called after the camera preview size is determined in
     * setUpCameraOutputs and also the size of `mTextureView` is fixed.
     *
     * @param viewWidth  The width of `mTextureView`
     * @param viewHeight The height of `mTextureView`
     */
    private void configureTransform(int viewWidth, int viewHeight) {
//        Activity activity = getActivity();
        if (null == mTextureView || null == mPreviewSize) //  || null == activity)
            return;
//        }
        int rotation = getDefaultDisplay().getRotation();
        Matrix matrix = new Matrix();
        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
        RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
        float centerX = viewRect.centerX();
        float centerY = viewRect.centerY();
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
            float scale = Math.max(
                    (float) viewHeight / mPreviewSize.getHeight(),
                    (float) viewWidth / mPreviewSize.getWidth());
            matrix.postScale(scale, scale, centerX, centerY);
            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180, centerX, centerY);
        }
        mTextureView.setTransform(matrix);
    }


    /**
     * 拍摄静止图片。 当我们得到响应时，应该调用此方法
     * Capture a still picture. This method should be called when we get a response in
     * {@link #mCameraCaptureSessionCaptureCallback} from both {@link #lockFocus()}.
     */
    private void captureStillPicture() {
        try {
//            final Activity activity = getActivity();
            // if (null == activity || null == mCameraDevice) {
            if (null == mCameraDevice) {
                return;
            }
            // This is the CaptureRequest.Builder that we use to take a picture.
            final CaptureRequest.Builder captureBuilder =
                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
            captureBuilder.addTarget(mImageReader.getSurface());

            // Use the same AE and AF modes as the preview.
            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
            setFlashMode(captureBuilder, false);
            // setAutoFlash(captureBuilder);

            // Orientation
            int rotation = getDefaultDisplay().getRotation();
            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));

            CameraCaptureSession.CaptureCallback captureCallback
                    = new CameraCaptureSession.CaptureCallback() {

                @Override
                public void onCaptureCompleted(@NonNull final CameraCaptureSession session,
                                               @NonNull final CaptureRequest request,
                                               @NonNull final TotalCaptureResult result) {
                    unlockFocus();
                }
            };

            mCaptureSession.stopRepeating();
            mCaptureSession.abortCaptures();
            mCaptureSession.capture(captureBuilder.build(), captureCallback, null);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

//

    /**
     * Lock the focus as the first step for a still image capture.
     */
    private void lockFocus() {
        try {
            // 相机锁定的方法 （设置相机对焦）
            // This is how to tell the camera to lock focus.
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_START);
            // mCameraCaptureSessionCaptureCallback 等待锁定  //修改状态
            // Tell #mCameraCaptureSessionCaptureCallback to wait for the lock.
            mState = STATE_WAITING_LOCK;
            // 发送对焦请求
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCameraCaptureSessionCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            LogCat.printStackTrace(e);
        }
    }


    /**
     * Unlock the focus. This method should be called when still image capture sequence is
     * finished.
     */
    private void unlockFocus() {
        try {
            // Reset the auto-focus trigger
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);
            setFlashMode(mPreviewRequestBuilder, true);
//            setAutoFlashForPreview(mPreviewRequestBuilder);
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCameraCaptureSessionCaptureCallback,
                    mBackgroundHandler);
            // After this, the camera will go back to the normal state of preview.
            mState = STATE_PREVIEW;
            mCaptureSession.setRepeatingRequest(mPreviewRequest, mCameraCaptureSessionCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            LogCat.printStackTrace(e);
        }
    }


    /**
     * Run the precapture sequence for capturing a still image. This method should be called when
     * we get a response in {@link #mCameraCaptureSessionCaptureCallback} from {@link #lockFocus()}.
     */
    public void runPrecaptureSequence() {
        try {
            // This is how to tell the camera to trigger.
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,
                    CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START);
            // Tell #mCameraCaptureSessionCaptureCallback to wait for the precapture sequence to be set.
            mState = STATE_WAITING_PRECAPTURE;
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCameraCaptureSessionCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    /**
     * Retrieves the JPEG orientation from the specified screen rotation.
     *
     * @param rotation The screen rotation.
     * @return The JPEG orientation (one of 0, 90, 270, and 360)
     */
    private int getOrientation(int rotation) {
        // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
        // We have to take that into account and rotate JPEG properly.
        // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.
        // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
        return (ORIENTATIONS.get(rotation) + mCameraParam.mSensorOrientation + 270) % 360;
    }


    private Camera2Param mCameraParam; // 选中相机的参数


    private Display getDefaultDisplay() {
        return mActivity.getWindowManager().getDefaultDisplay();
    }


    private void setupPreviewSize(Size textureViewSize, Size largest) {
        Display defaultDisplay = getDefaultDisplay();
//        CameraCharacteristics characteristics = mCameraParam.mCharacteristics;
        StreamConfigurationMap map = mCameraParam.mMap;
        int sensorOrientation = mCameraParam.mSensorOrientation;

        // Find out if we need to swap dimension to get the preview size relative to sensor
        // coordinate.
        int displayRotation = defaultDisplay.getRotation();
        boolean swappedDimensions = false;
        switch (displayRotation) {
            case Surface.ROTATION_0:
            case Surface.ROTATION_180:
                if (sensorOrientation == 90 || sensorOrientation == 270) {
                    swappedDimensions = true;
                }
                break;
            case Surface.ROTATION_90:
            case Surface.ROTATION_270:
                if (sensorOrientation == 0 || sensorOrientation == 180) {
                    swappedDimensions = true;
                }
                break;
            default:
                LogCat.e("Display rotation is invalid: " + displayRotation);
        }

        Point displaySize = new Point();
        defaultDisplay.getSize(displaySize);

        int width = textureViewSize.getWidth();
        int height = textureViewSize.getHeight();
        int rotatedPreviewWidth = width;
        int rotatedPreviewHeight = height;
        int maxPreviewWidth = displaySize.x;
        int maxPreviewHeight = displaySize.y;

        if (swappedDimensions) {
            rotatedPreviewWidth = height;
            rotatedPreviewHeight = width;
            maxPreviewWidth = displaySize.y;
            maxPreviewHeight = displaySize.x;
        }

//        if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
//            maxPreviewWidth = MAX_PREVIEW_WIDTH;
//        }
//
//        if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
//            maxPreviewHeight = MAX_PREVIEW_HEIGHT;
//        }

        // Danger, W.R.! Attempting to use too large a preview size could exceed the camera
        // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
        // garbage capture data.
        mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),
                rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
                maxPreviewHeight, largest);
    }


    /**
     * Given {@code choices} of {@code Size}s supported by a camera, choose the smallest one that
     * is at least as large as the respective texture view size, and that is at most as large as the
     * respective max size, and whose aspect ratio matches with the specified value. If such size
     * doesn't exist, choose the largest one that is at most as large as the respective max size,
     * and whose aspect ratio matches with the specified value.
     *
     * @param choices           The list of sizes that the camera supports for the intended output
     *                          class
     * @param textureViewWidth  The width of the texture view relative to sensor coordinate
     * @param textureViewHeight The height of the texture view relative to sensor coordinate
     * @param maxWidth          The maximum width that can be chosen
     * @param maxHeight         The maximum height that can be chosen
     * @param aspectRatio       The aspect ratio
     * @return The optimal {@code Size}, or an arbitrary one if none were big enough
     */
    private static Size chooseOptimalSize(Size[] choices, int textureViewWidth,
                                          int textureViewHeight, int maxWidth, int maxHeight, Size aspectRatio) {

        // Collect the supported resolutions that are at least as big as the preview Surface
        List<Size> bigEnough = new ArrayList<>();
        // Collect the supported resolutions that are smaller than the preview Surface
        List<Size> notBigEnough = new ArrayList<>();
        int w = aspectRatio.getWidth();
        int h = aspectRatio.getHeight();
        for (Size option : choices) {
            if (option.getWidth() <= maxWidth && option.getHeight() <= maxHeight &&
                    option.getHeight() == option.getWidth() * h / w) {
                if (option.getWidth() >= textureViewWidth &&
                        option.getHeight() >= textureViewHeight) {
                    bigEnough.add(option);
                } else {
                    notBigEnough.add(option);
                }
            }
        }

        // Pick the smallest of those big enough. If there is no one big enough, pick the
        // largest of those not big enough.
        if (bigEnough.size() > 0) {
            return Collections.min(bigEnough, new CompareSizesByArea());
        } else if (notBigEnough.size() > 0) {
            return Collections.max(notBigEnough, new CompareSizesByArea());
        } else {
            LogCat.e("Couldn't find any suitable preview size");
            return choices[0];
        }
    }

    private void setupImageReader(Size largest) {
        mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),
                ImageFormat.JPEG, /*maxImages*/2);
        mImageReader.setOnImageAvailableListener(
                mOnImageAvailableListener, mBackgroundHandler);
    }

    /**
     * 配置 相机的 预览尺寸
     * Sets up member variables related to camera.
     *
     * @param width  The width of available size for camera preview
     * @param height The height of available size for camera preview
     */
//    @SuppressWarnings("SuspiciousNameCombination")
    private boolean setUpCameraOutputs(int width, int height) {
        return setUpCameraOutputs(new Size(width, height));
    }

    private boolean setUpCameraOutputs(Size textureViewSize) {
        CameraManager manager = getCameraManager();
        mCameraParam = new Camera2Param(mBuilder, manager);
        if (mCameraParam.mCameraId == null)
            return false;

        StreamConfigurationMap map = mCameraParam.mMap;// characteristics.get(

        // For still image captures, we use the largest available size.
        Size largest = Collections.max(
                Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),
                new CompareSizesByArea());

        setupImageReader(largest);
        setupPreviewSize(textureViewSize, largest);
        return true;
    }

    /**
     * Opens the camera specified by {@link #mCameraParam#mCameraId}.
     */
    public void openCamera(final int width, final int height) {
        if (ActivityCompat.checkSelfPermission(mBuilder.getContext(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_NO_PERMISSION, new Exception("没有相机权限"));
            return;
        }

        setUpCameraOutputs(width, height);

        // We fit the aspect ratio of TextureView to the size of preview we picked.
        if (mTextureView instanceof AutoFitTextureView) {
            AutoFitTextureView textureView = (AutoFitTextureView) mTextureView;
            int orientation = mActivity.getResources().getConfiguration().orientation;
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                textureView.setAspectRatio(
                        mPreviewSize.getWidth(), mPreviewSize.getHeight());
            } else {
                textureView.setAspectRatio(
                        mPreviewSize.getHeight(), mPreviewSize.getWidth());
            }
        }

        configureTransform(width, height);
//        Context context = mActivity;
        CameraManager manager = getCameraManager();
        try {
            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {

                throw new RuntimeException("Time out waiting to lock camera opening.");
            }
            manager.openCamera(mCameraParam.mCameraId, mCameraDeviceStateCallback, mBackgroundHandler);
        } catch (CameraAccessException e) {
            mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_OPEN_CAMERA, e);
        } catch (InterruptedException e) {
            mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_OPEN_CLOSE_LOCK,
                    new RuntimeException("Interrupted while trying to lock camera opening.", e));
        }
    }

    /**
     * Closes the current {@link CameraDevice}.
     */
    public void closeCamera() {
        try {
            mCameraOpenCloseLock.acquire();
            if (null != mCaptureSession) {
                mCaptureSession.close();
                mCaptureSession = null;
            }
            if (null != mCameraDevice) {
                mCameraDevice.close();
                mCameraDevice = null;
            }
            if (null != mImageReader) {
                mImageReader.close();
                mImageReader = null;
            }
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera closing.", e);
        } finally {
            mCameraOpenCloseLock.release();
        }
    }

    /**
     * Creates a new {@link CameraCaptureSession} for camera preview.
     */
    private void createCameraPreviewSession() {
        try {
            SurfaceTexture texture = mTextureView.getSurfaceTexture();
            assert texture != null;

            // 将默认缓冲区的大小配置为相机预览的大小。
            // We configure the size of default buffer to be the size of camera preview we want.
            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

            // This is the output Surface we need to start preview.
            Surface surface = new Surface(texture);

            //  Camera2都是通过创建请求会话的方式进行调用的
            // TEMPLATE_PREVIEW：创建预览的请求
            // TEMPLATE_STILL_CAPTURE：创建一个适合于静态图像捕获的请求，图像质量优先于帧速率。
            // TEMPLATE_RECORD：创建视频录制的请求
            // TEMPLATE_VIDEO_SNAPSHOT：创建视视频录制时截屏的请求
            // TEMPLATE_ZERO_SHUTTER_LAG：创建一个适用于零快门延迟的请求。在不影响预览帧率的情况下最大化图像质量。
            // TEMPLATE_MANUAL：创建一个基本捕获请求，这种请求中所有的自动控制都是禁用的(自动曝光，自动白平衡、自动焦点)。
            // We set up a CaptureRequest.Builder with the output Surface.
            mPreviewRequestBuilder = mCameraDevice
                    .createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
            mPreviewRequestBuilder.addTarget(surface);

            // 方法创建CaptureSession。
            // Here, we create a CameraCaptureSession for camera preview.
            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),
                    mCameraCaptureSessionStateCallback, null);
        } catch (CameraAccessException e) {
            mBuilder.getErrorCallback().onError(ErrorCallback.ERROR_CAMERA_ACCESS, e);
        }
    }

    public void setLensFace(int lensFacing) {
        mBuilder.setLensFacing(lensFacing); // TODO ？？？
        closeCamera();
        openCamera(mTextureView.getWidth(), mTextureView.getHeight());
    }

//    public static class Builder {
//
//        Activity mActivity;
//
//        private AutoFitTextureView mTextureView; // 预览载体
//
//        private int mLensFacing = CameraCharacteristics.LENS_FACING_BACK;
//
//        /**
//         * Whether the current camera device supports Flash or not.
//         */
//        private boolean mFlashSupported;
//
//        private ErrorListener mErrorListener;
//
//        public Builder(Activity activity) {
//            mActivity = activity;
//        }
//
//        public Builder setTextureView(AutoFitTextureView textureView) {
//            mTextureView = textureView;
//            return this;
//        }
//
//        /**
//         * @see CameraCharacteristics#LENS_FACING_FRONT
//         * @see CameraCharacteristics#LENS_FACING_BACK
//         * @see CameraCharacteristics#LENS_FACING_EXTERNAL
//         */
//        public Builder setLensFacing(int lensFacing) {
//            mLensFacing = lensFacing;
//            return this;
//        }
//
////        public int getLensFacing() {
////            return mLensFacing;
////        }
//
//        public Camera2Util build() {
//            Camera2Util camera2Util = new Camera2Util(mActivity, this);
//            camera2Util.mTextureView = mTextureView;
//            return camera2Util;
//        }
//
//        public int getLensFacing() {
//            return mLensFacing;
//        }
//
//        public boolean isFlashSupported() {
//            return mFlashSupported;
//        }
//
//        public ErrorListener getErrorListener() {
//            return mErrorListener;
//        }
//    }

    // ========================================
    // 工作线程相关
    // ========================================

    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread("CameraBackground");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        mBackgroundThread.quitSafely();
        try {
            mBackgroundThread.join();
            mBackgroundThread = null;
            mBackgroundHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    // ========================================
    // 选中相机的参数
    // ========================================
//
//    /**
//     * 选择相机，并保有相机常量参数
//     */
//    public static class Camera2Param {
//
//        /**
//         * 主要参数
//         */
//        private String mCameraId;
//        private CameraCharacteristics mCharacteristics; // 描述摄像头的各种特性
//        private StreamConfigurationMap mMap;
//
//        /**
//         * 其他参数
//         */
//        private boolean mFlashSupported; // true：支持闪光灯
//        private int mSensorOrientation; // Orientation of the camera sensor（相机传感器方向）
//
//        public Camera2Param(@NonNull Builder builder, @NonNull CameraManager manager) {
//            initMaster(builder, manager);
//            initFlashSupported();
//            initSensorOrientation();
//        }
//
//        private void initMaster(@NonNull Builder builder, @NonNull CameraManager manager) {
//            try {
//                for (String cameraId : manager.getCameraIdList()) {
//                    CameraCharacteristics characteristics
//                            = manager.getCameraCharacteristics(cameraId);
//
//                    // We don't use a front facing camera in this sample.
//                    Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
//                    if (facing != null && facing != builder.mLensFacing)
//                        continue;
//
//                    StreamConfigurationMap map = characteristics.get(
//                            CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
//                    if (map != null) {
//                        mCameraId = cameraId;
//                        mCharacteristics = characteristics;
//                        mMap = map;
//                        return;
//                    }
//                }
//            } catch (Exception e) {
//                if (builder.mErrorListener != null)
//                    builder.mErrorListener.onError(e);
//            }
//        }
//
//        /**
//         * after {@link #initMaster(Builder, CameraManager)}
//         */
//        private void initFlashSupported() {
//            Boolean available = mCharacteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);
//            mFlashSupported = available == null ? false : available;
//        }
//
//        private void initSensorOrientation() {
//            Integer orientation = mCharacteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
//            if (orientation != null)
//                mSensorOrientation = orientation;
//        }
//    }

    // ========================================
    // 其他
    // ========================================

    /**
     * Compares two {@code Size}s based on their areas.
     */
    static class CompareSizesByArea implements Comparator<Size> {

        @Override
        public int compare(Size lhs, Size rhs) {
            // We cast here to ensure the multiplications won't overflow
            return Long.signum((long) lhs.getWidth() * lhs.getHeight() -
                    (long) rhs.getWidth() * rhs.getHeight());
        }

    }

//    public interface ErrorListener {
//
//        void onError(Exception e);
//    }
}
